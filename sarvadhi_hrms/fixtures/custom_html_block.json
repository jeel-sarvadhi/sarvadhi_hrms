[
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div class=\"birthday-container\">\n    <h2>Upcoming Birthdays</h2>\n    <div class=\"birthday-list\" id=\"birthday_list\">\n    </div>\n</div>\n",
  "modified": "2025-02-12 11:57:36.652355",
  "name": "Upcoming Holidays",
  "private": 0,
  "roles": [],
  "script": "frappe.call({\n    method: 'sarvadhi_hrms.utils.todo.get_upcoming_birthdays', // Backend method to get upcoming birthdays\n    callback: function(r) {\n        let birthdays_list = r.message; // Assuming the data comes as an array of birthdays\n        console.log(birthdays_list, \"Upcoming Birthdays\");\n\n        let birthday_list_div = root_element.getElementById('birthday_list');\n        birthday_list_div.innerHTML = \"\"; // Clear the list before adding new data\n        \n        if (birthdays_list && birthdays_list.length > 0) {\n            let birthdayItems = birthdays_list.map(function(birthday) {\n                return `<div class=\"birthday-item\">\n                    <div class=\"birthday-info\">\n                        <div class=\"employee-name\">${birthday.name}</div>\n                        <div class=\"birthday-date\">${birthday.date}</div>\n                    </div>\n                </div>`;\n            }).join('');\n            birthday_list_div.innerHTML += birthdayItems;\n        } else {\n            birthday_list_div.innerHTML = '<div class=\"no-birthday\">No upcoming birthdays.</div>';\n        }\n    },\n    error: function(r) {\n        console.log(\"Error fetching birthdays\", r);\n    }\n});\n",
  "style": "body {\n    font-family: Arial, sans-serif;\n    background-color: #f4f4f4;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n}\n\n.birthday-container {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    width: 300px;\n}\n\nh2 {\n    text-align: center;\n    margin-bottom: 20px;\n    color: #333;\n}\n\n.birthday-list {\n    list-style-type: none;\n    padding: 0;\n    max-height: 300px;\n    overflow-y: scroll;\n}\n\n.birthday-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px;\n    background-color: #f9f9f9;\n    border-radius: 4px;\n    margin-bottom: 10px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.birthday-item:hover {\n    background-color: #f0f0f0;\n}\n\n.birthday-info {\n    display: flex;\n    flex-direction: column;\n}\n\n.employee-name {\n    font-weight: bold;\n    color: #333;\n}\n\n.birthday-date {\n    color: #888;\n    font-size: 12px;\n}\n\n.no-birthday {\n    text-align: center;\n    color: #888;\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div class=\"birthday-container\">\n    <h2>Upcoming Birthdays</h2>\n    <div class=\"birthday-list\" id=\"birthday_list\">\n    </div>\n</div>\n",
  "modified": "2025-02-12 12:57:20.017067",
  "name": "Upcoming Birthdays",
  "private": 0,
  "roles": [],
  "script": "frappe.call({\n    method: 'sarvadhi_hrms.utils.todo.get_upcoming_birthdays', // Backend method to get upcoming birthdays\n    callback: function(r) {\n        let birthdays_list = r.message; // Assuming the data comes as an array of birthdays\n        console.log(birthdays_list, \"Upcoming Birthdays\");\n\n        let birthday_list_div = root_element.getElementById('birthday_list');\n        birthday_list_div.innerHTML = \"\"; // Clear the list before adding new data\n        \n        if (birthdays_list && birthdays_list.length > 0) {\n            let birthdayItems = birthdays_list.map(function(birthday) {\n                return `<div class=\"birthday-item\">\n                    <div class=\"birthday-info\">\n                        <div class=\"employee-name\">${birthday.employee_name}</div>\n                        <div class=\"birthday-date\">${birthday.date_of_birth}</div>\n                    </div>\n                </div>`;\n            }).join('');\n            birthday_list_div.innerHTML += birthdayItems;\n        } else {\n            birthday_list_div.innerHTML = '<div class=\"no-birthday\">No upcoming birthdays.</div>';\n        }\n    },\n    error: function(r) {\n        console.log(\"Error fetching birthdays\", r);\n    }\n});\n",
  "style": "body {\n    font-family: Arial, sans-serif;\n    background-color: #f4f4f4;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n}\n\n.birthday-container {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    width: 300px;\n}\n\nh2 {\n    text-align: center;\n    margin-bottom: 20px;\n    color: #333;\n}\n\n.birthday-list {\n    list-style-type: none;\n    padding: 0;\n    max-height: 300px;\n    overflow-y: scroll;\n}\n\n.birthday-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px;\n    background-color: #f9f9f9;\n    border-radius: 4px;\n    margin-bottom: 10px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.birthday-item:hover {\n    background-color: #f0f0f0;\n}\n\n.birthday-info {\n    display: flex;\n    flex-direction: column;\n}\n\n.employee-name {\n    font-weight: bold;\n    color: #333;\n}\n\n.birthday-date {\n    color: #888;\n    font-size: 12px;\n}\n\n.no-birthday {\n    text-align: center;\n    color: #888;\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<h2>Weather Details</h2>\n\n\n<div id=\"root\">\n  <button id=\"fetchWeather\">Fetch Weather</button>\n  <div class=\"weather-details\">\n      <div id=\"list-class\"></div>\n  </div>\n</div>\n",
  "modified": "2025-03-03 17:16:11.265379",
  "name": "Weather Data",
  "private": 0,
  "roles": [],
  "script": "// let rootBlock = root_element.querySelector('#root');\n// let button = rootBlock.querySelector('#fetchWeather');\n// let data_list = rootBlock.querySelector('.weather-details');\n// let list_class = data_list.querySelector('#list-class');\n\n// button.addEventListener('click', function() {\n//     let my_api = 'http://api.weatherapi.com/v1/current.json?key=72fa3296bca44b0ba8764614250303&q=surat&aqi=no';\n//     fetch(my_api,{\n//         method: 'GET',\n//         headers: {\n//             'content-type': 'Application/json'\n//         }\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//         console.log(data);\n//         list_class.innerHTML = `<p><strong>Location Information</strong></p>\n//             <p>City: ${data.location.name}</p>\n//             <p>Region:${data.location.region}</p>\n//             <p>Country:${data.location.country}</p>\n//             <p>Latitude: ${data.location.lat}</p>\n//             <p>Longitude: ${data.location.lon}</p>\n//             <p>Timezone: ${data.location.tz_id}</p>\n//             <p>Local Time: ${data.location.localtime}</p>\n            \n//             <p><strong>Current Weather</strong></p>\n//             <p>Temperature: ${data.current.temp_c}째C / ${data.current.temp_f}째F</p>\n//             <p>Condition: ${data.current.condition.text}</p>\n//             <p>Humidity: ${data.current.humidity}%</p>\n//             <p>Cloud Cover: ${data.current.cloud}%</p>`;\n//     })\n//     .catch(error => {\n//         console.error('Error fetching weather data:', error);\n//         list_class.innerHTML = `<p>Please try again later.</p>`;\n//     })\n// });\n\n\nlet rootBlock = root_element.querySelector('#root');\nlet button = rootBlock.querySelector('#fetchWeather');\nlet data_list = rootBlock.querySelector('.weather-details');\nlet list_class = data_list.querySelector('#list-class');\n\nbutton.onclick = function() {\n    let my_api = 'http://api.weatherapi.com/v1/current.json?key=72fa3296bca44b0ba8764614250303&q=surat&aqi=no';\n    \n    fetch(my_api, {\n        method: 'GET',\n        headers: {\n            'content-type': 'Application/json'\n        }\n    })\n    .then(response => response.json())\n    .then(data => {\n        console.log(data);\n        list_class.innerHTML = `<p><strong>Location Information</strong></p>\n            <p>City: ${data.location.name}</p>\n            <p>Region:${data.location.region}</p>\n            <p>Country:${data.location.country}</p>\n            <p>Latitude: ${data.location.lat}</p>\n            <p>Longitude: ${data.location.lon}</p>\n            <p>Timezone: ${data.location.tz_id}</p>\n            <p>Local Time: ${data.location.localtime}</p>\n            \n            <p><strong>Current Weather</strong></p>\n            <p>Temperature: ${data.current.temp_c}째C / ${data.current.temp_f}째F</p>\n            <p>Condition: ${data.current.condition.text}</p>\n            <p>Humidity: ${data.current.humidity}%</p>\n            <p>Cloud Cover: ${data.current.cloud}%</p>`;\n    })\n    .catch(error => {\n        console.error('Error fetching weather data:', error);\n        list_class.innerHTML = `<p>Please try again later.</p>`;\n    })\n};\n",
  "style": "body {\n    font-family: Arial, sans-serif;\n    background-color: #f4f4f9;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n}\n\n#root {\n    background-color: #ffffff;\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n    width: 100%;\n    max-width: 600px;\n    text-align: center;\n}\n\nh2 {\n    font-size: 24px;\n    color: #333;\n    margin-bottom: 20px;\n}\n\nbutton#fetchWeather {\n    background-color: #4CAF50; \n    color: white;\n    padding: 12px 20px;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    font-size: 16px;\n    transition: background-color 0.3s;\n}\n\nbutton#fetchWeather:hover {\n    background-color: #45a049;\n}\n\n.weather-details {\n    margin-top: 20px;\n    text-align: left;\n}\n\n.weather-details p {\n    font-size: 16px;\n    color: #555;\n    margin: 8px 0;\n}\n\n.weather-details strong {\n    color: #333;\n    font-weight: bold;\n}\n\n.weather-details p#error {\n    color: red;\n    font-weight: bold;\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div class=\"todo-container\">\n        <h2>Todo List</h2>\n        <div class=\"todo-list\" id=\"todo_list\">\n        </div>\n    </div>",
  "modified": "2025-02-12 11:47:15.656490",
  "name": "ToDo List",
  "private": 0,
  "roles": [],
  "script": "frappe.call({\n method: 'sarvadhi_hrms.utils.todo.get_todo',\n callback: function(r) {\n     let todos_list = r.message;\n     console.log(todos_list,\"!!!!!!\")\n     let todo_list_div = root_element.getElementById('todo_list');\n     todo_list_div.innerHTML = \"\";\n     \n     if (todos_list) {\n         let todoItems = todos_list.map(function(todo) {\n             return `<div class=\"todo-item\">\n                <div class=\"task-info\">\n                    <div class=\"task-title\">${todo.name}</div>\n                    <div class=\"task-date\">${todo.date}</div>\n                </div>\n            </div>`;\n         }).join('');\n         console.log(todoItems,\"!!!!!!\")\n         todo_list_div.innerHTML += todoItems;\n     } else {\n            todo_list_div.innerHTML = '<li class=\"no-todo\">No pending tasks.</li>';\n        }\n },\n error: function(r) {\n // on error\n console.log(\"----------------------error\",r)\n }\n})",
  "style": "body {\n    font-family: Arial, sans-serif;\n    background-color: #f4f4f4;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n}\n\n.todo-container {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    width: 300px;\n}\n\nh2 {\n    text-align: center;\n    margin-bottom: 20px;\n    color: #333;\n}\n\n.todo-list {\n    list-style-type: none;\n    padding: 0;\n    max-height: 300px; /* Set the fixed height for the list container */\n    overflow-y: scroll; /* Make the list scrollable */\n}\n\n.todo-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px;\n    background-color: #f9f9f9;\n    border-radius: 4px;\n    margin-bottom: 10px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.todo-item:hover {\n    background-color: #f0f0f0;\n}\n\n.task-info {\n    display: flex;\n    flex-direction: column;\n}\n\n.task-title {\n    font-weight: bold;\n    color: #333;\n}\n\n.task-date {\n    color: #888;\n    font-size: 12px;\n}\n\n.score-input:focus {\n    outline: none;\n    border-color: #007bff;\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<div class=\"birthday-container\">\n    <h2>Upcoming Birthdays</h2>\n    <div class=\"birthday-list\" id=\"birthday_list\">\n        <!-- Birthday items will be added dynamically here -->\n    </div>\n</div>\n",
  "modified": "2025-02-12 17:19:55.461477",
  "name": "birthday img",
  "private": 0,
  "roles": [],
  "script": "frappe.call({\n    method: 'sarvadhi_hrms.utils.todo.get_upcoming_birthdayss', // Backend method to get upcoming birthdays\n    callback: function(r) {\n        let birthdays_list = r.message; // Assuming the data comes as an array of birthdays\n        console.log(birthdays_list, \"Upcoming Birthdays\");\n\n        let birthday_list_div = root_element.getElementById('birthday_list');\n        birthday_list_div.innerHTML = \"\"; // Clear the list before adding new data\n        \n        if (birthdays_list && birthdays_list.length > 0) {\n            let birthdayItems = birthdays_list.map(function(birthday) {\n                return `<div class=\"birthday-item\">\n                    <img class=\"birthday-img\" src=\"${birthday.image}\" alt=\"Profile Picture\">\n                    <div class=\"birthday-info\">\n                        <div class=\"employee-name\">${birthday.employee_name}</div>\n                        <div class=\"birthday-date\">${birthday.date_of_birth} (${birthday.day_name})</div>\n                    </div>\n                </div>`;\n            }).join('');\n            birthday_list_div.innerHTML += birthdayItems;\n        } else {\n            birthday_list_div.innerHTML = '<div class=\"no-birthday\">No upcoming birthdays.</div>';\n        }\n    },\n    error: function(r) {\n        console.log(\"Error fetching birthdays\", r);\n    }\n});\n",
  "style": ".birthday-container {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    width: 300px;\n}\n\n.birthday-list {\n    list-style-type: none;\n    padding: 0;\n    max-height: 300px;\n    overflow-y: auto;\n}\n\n.birthday-item {\n    display: flex;\n    align-items: center;\n    padding: 10px;\n    background-color: #f9f9f9;\n    border-radius: 4px;\n    margin-bottom: 10px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\nh2 {\n    text-align: center;\n    margin-bottom: 20px;\n    color: #333;\n}\n\n.birthday-img {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    margin-right: 10px;\n}\n\n.birthday-info {\n    display: flex;\n    flex-direction: column;\n}\n\n.employee-name {\n    font-weight: bold;\n    color: #333;\n}\n\n.birthday-date {\n    color: #888;\n    font-size: 12px;\n}\n\n.no-birthday {\n    text-align: center;\n    color: #888;\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom HTML Block",
  "html": "<h2>Time</h2>\n<title>Digital Clock</title>\n<!--<div class=\"clock-container\">-->\n<!--    <div class=\"time\" id=\"time\"></div>-->\n<!--    <div class=\"date\" id=\"date\"></div>-->\n<!--</div>-->\n\n<div class=\"clock-container\">\n    <div class=\"time time-class\"></div>\n    <div class=\"date\"></div>\n</div>\n\n",
  "modified": "2025-02-28 09:38:16.755344",
  "name": "Time",
  "private": 0,
  "roles": [],
  "script": "    function updateClock(root_element) {\n        let now = new Date();\n        let hours = now.getHours();\n        let minutes = now.getMinutes();\n        let seconds = now.getSeconds();\n        let ampm = hours >= 12 ? 'PM' : 'AM';\n\n        hours = hours % 12 || 12; // Convert 24-hour to 12-hour format\n        minutes = minutes.toString().padStart(2, '0');\n        seconds = seconds.toString().padStart(2, '0');\n\n        let timeString = `${hours}:${minutes}:${seconds} <span class=\"ampm\">${ampm}</span>`;\n\n        let timeElement = root_element.querySelector('.time-class');\n        let dateElement = root_element.querySelector('.date');\n\n        if (timeElement) timeElement.innerHTML = timeString;\n        if (dateElement) {\n            let options = { weekday: 'long', day: 'numeric', month: 'long', year: 'numeric' };\n            dateElement.innerText = now.toLocaleDateString('en-GB', options);\n        }\n    }\n\n    setInterval(() => updateClock(root_element), 1000);\n    updateClock(root_element);",
  "style": "body {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        height: 100vh;\n        background: #f0f0f0;\n    }\n.clock-container {\n    background: #333;\n    color: white;\n    font-family: Arial, sans-serif;\n    text-align: center;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);\n}\n.time {\n    font-size: 48px;\n    font-weight: bold;\n}\n.ampm {\n    font-size: 24px;\n    font-weight: lighter;\n    color: rgba(255, 255, 255, 0.7);\n}\n.date {\n    font-size: 18px;\n    margin-top: 10px;\n    color: rgba(255, 255, 255, 0.7);\n}"
 }
]